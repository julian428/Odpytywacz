---
import FileNav from "@components/fileNav.astro";
import Wrapper from "@components/item/Wrapper";
import DashboardLayout from "@layouts/DashboardLayout.astro";
import { SpinnerIcon } from "@lib/icons";
import axios, { AxiosError } from "axios";

export const prerender = false;
const { playlistId, itemId } = Astro.params;
const pb_loc = import.meta.env.PB_LOCATION;
const method = Astro.request.method;
const userData = Astro.locals.user;

let data = {
  id: "",
  title: "",
  description: "",
  color: "",
  cover: "",
  parentId: "",
  parentTitle: "",
};
let message: AlertMessage = {
  show: false,
  type: "",
  message: "",
};

switch (method) {
  case "POST":
    try {
      const formBody = await Astro.request.formData();

      const parentId = formBody.get("parentId") as string;
      const parentTitle = formBody.get("parentTitle") as string;
      const color = formBody.get("color") as string;
      const cover = formBody.get("cover") as string;
      const title = formBody.get("title") as string;
      const description = formBody.get("description") as string;

      const updatedData = {
        color,
        cover,
        description,
        title,
      };
      data = {
        id: itemId || "",
        parentId,
        parentTitle,
        ...updatedData,
      };
      await axios.patch(
        `${pb_loc}/api/collections/item/records/${itemId}`,
        updatedData,
        {
          headers: {
            Authorization: `Bearer ${userData?.token}`,
          },
        }
      );
      message.show = true;
      message.type = "success";
      message.message = "Updated the config file.";
    } catch (error) {
      message.show = true;
      message.type = "error";
      message.message = "Something went wrong";
    }
    break;
  default:
    try {
      const response = await axios.get(
        `${pb_loc}/api/collections/item/records/${itemId}?expand=playlist`
      );
      data.id = response.data.id;
      data.title = response.data.title;
      data.description = response.data.description;
      data.color = response.data.color;
      data.cover = response.data.cover;
      data.parentId = response.data.expand.playlist.id;
      data.parentTitle = response.data.expand.playlist.title;
    } catch (error) {
      message.show = true;
      message.type = "error";
      if (error instanceof AxiosError) {
        message.message = "Can't find this item.";
      } else {
        message.message = "Something went wrong.";
      }
    }
    break;
}
---

<DashboardLayout message={message}>
  <form>
    <FileNav
      bread_crumbs={[
        {
          href: `/dashboard/${data.parentId}/config`,
          title: data.parentTitle,
          type: ".",
        },
        {
          href: "",
          title: data.title,
          type: ".",
        },
        {
          href: "",
          title: "config",
          type: ".yaml",
          className: "text-error",
        },
      ]}
      save_content={{ url: `/dashboard/${playlistId}/${itemId}/config` }}
      delete_content={{
        target: `#item-${itemId}`,
        url: `/dashboard/${playlistId}/files?itemId=${itemId}`,
      }}
      create_content={{
        indicator: "#loading",
        select: ".question",
        target: `#questions-${itemId}`,
        title: "+ QUESTION",
        url: `/dashboard/${playlistId}/${itemId}/files`,
      }}
    />
    <input type="hidden" name="parentId" value={data.parentId} />
    <input type="hidden" name="parentTitle" value={data.parentTitle} />
    <Wrapper client:load defaultData={data} />
    <div
      id="loading"
      class="htmx-indicator alert text-base px-4 py-2 rounded-none w-fit absolute flex justify-between bottom-4 right-4"
    >
      <div class="animate-spin">
        <SpinnerIcon />
      </div>
       Loading
    </div>
  </form>
</DashboardLayout>
