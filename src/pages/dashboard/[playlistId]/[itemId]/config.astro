---
import ErrorAlert from "@components/alerts/errorAlert.astro";
import SuccessAlert from "@components/alerts/successAlert.astro";
import Wrapper from "@components/item/Wrapper";
import DashboardLayout from "@layouts/DashboardLayout.astro";
import { GhostConfigFileIcon, GhostFolderIcon, SpinnerIcon } from "@lib/icons";
import axios, { AxiosError } from "axios";

export const prerender = false;
const { playlistId, itemId } = Astro.params;
const pb_loc = import.meta.env.PB_LOCATION;
const method = Astro.request.method;

let data = {
  id: "",
  title: "",
  description: "",
  color: "",
  cover: "",
  parentId: "",
  parentTitle: "",
};
let message = {
  show: false,
  type: "",
  message: "",
};

switch (method) {
  case "POST":
    try {
      const formBody = await Astro.request.formData();

      const parentId = formBody.get("parentId") as string;
      const parentTitle = formBody.get("parentTitle") as string;
      const color = formBody.get("color") as string;
      const cover = formBody.get("cover") as string;
      const title = formBody.get("title") as string;
      const description = formBody.get("description") as string;

      const updatedData = {
        color,
        cover,
        description,
        title,
      };
      data = {
        id: itemId || "",
        parentId,
        parentTitle,
        ...updatedData,
      };
      await axios.patch(
        `${pb_loc}/api/collections/item/records/${itemId}`,
        updatedData
      );
      message.show = true;
      message.type = "success";
      message.message = "Updated the config file.";
    } catch (error) {
      message.show = true;
      message.type = "error";
      message.message = "Something went wrong";
    }
    break;
  default:
    try {
      const response = await axios.get(
        `${pb_loc}/api/collections/item/records/${itemId}?expand=playlist`
      );
      data.id = response.data.id;
      data.title = response.data.title;
      data.description = response.data.description;
      data.color = response.data.color;
      data.cover = response.data.cover;
      data.parentId = response.data.expand.playlist.id;
      data.parentTitle = response.data.expand.playlist.title;
    } catch (error) {
      message.show = true;
      message.type = "error";
      if (error instanceof AxiosError) {
        message.message = "Can't find this item.";
      } else {
        message.message = "Something went wrong.";
      }
    }
    break;
}
---

<DashboardLayout>
  <form
    hx-post={`/dashboard/${playlistId}/${itemId}/config`}
    hx-swap="outerHTML"
    hx-select="#dashboard-content"
    hx-target="#dashboard-content"
  >
    <nav class="w-full p-2 gap-4 flex justify-between border-b border-base-100">
      <div class="text-sm breadcrumbs">
        <ul>
          <li>
            <a href={`/dashboard/${data.parentId}/config`}>
              <span class="pr-1">
                <GhostFolderIcon />
              </span>
              {data.parentTitle}
            </a>
          </li>
          <li>
            <a>
              <span class="pr-1">
                <GhostFolderIcon />
              </span>
              {data.title}
            </a>
          </li>
          <li>
            <a>
              <span class="text-error pr-1">
                <GhostConfigFileIcon />
              </span>
               config.yaml
            </a>
          </li>
        </ul>
      </div>
      <div class="space-x-2">
        <button
          hx-post={`/dashboard/${playlistId}/${itemId}/files`}
          hx-target={`#questions-${itemId}`}
          hx-swap="afterend"
          hx-select=".question"
          type="button"
          hx-indicator="#loading"
          class="btn btn-sm hover:bg-warning rounded-none"
        >
          + question</button
        >
        <button
          hx-delete={`/dashboard/${playlistId}/files?itemId=${itemId}`}
          hx-swap="outerHTML"
          hx-replace-url={`/dashboard/${playlistId}/config`}
          hx-target={`#item-${itemId}`}
          class="btn btn-sm hover:bg-error rounded-none"
        >
          delete
        </button>
        <button
          class="btn btn-sm hover:bg-success hover:text-black rounded-none"
        >
          save
        </button>
      </div>
    </nav>
    <input type="hidden" name="parentId" value={data.parentId} />
    <input type="hidden" name="parentTitle" value={data.parentTitle} />
    <Wrapper client:load defaultData={data} />
    <div
      id="loading"
      class="htmx-indicator alert text-base px-4 py-2 rounded-none w-fit absolute flex justify-between bottom-4 right-4"
    >
      <div class="animate-spin">
        <SpinnerIcon />
      </div>
       Loading
    </div>
    {
      message.show && message.type === "success" && (
        <SuccessAlert message={message} />
      )
    }
    {
      message.show && message.type === "error" && (
        <ErrorAlert message={message} />
      )
    }
  </form>
</DashboardLayout>
