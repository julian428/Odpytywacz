---
import Spinner from "@components/spinner.astro";
import {
  ConfigFileIcon,
  FolderIcon,
  MarkdownFileIcon,
  OpenFolderIcon,
} from "@lib/icons";
import axios from "axios";

export const prerender = false;
const pb_loc = import.meta.env.PB_LOCATION;
const { playlistId } = Astro.params;
const urlparams = new URL(Astro.url).searchParams;
const itemId = urlparams.get("itemId");
const questionId = urlparams.get("questionId");
const method = Astro.request.method;

let items: Item[] = [];

switch (method) {
  case "DELETE":
    try {
      await axios.delete(`${pb_loc}/api/collections/item/records/${itemId}`);
    } catch (error) {
      console.log(error);
    }
    break;
  case "POST":
    try {
      const userData = Astro.locals.user;
      const response = await axios.post(
        `${pb_loc}/api/collections/item/records`,
        {
          title: "New Item",
          owner: userData?.record.id,
          playlist: playlistId,
        }
      );
      items = [response.data];
    } catch (error) {
      console.log(error);
    }
    break;
  default:
    try {
      const response = await axios.get(
        `${pb_loc}/api/collections/item/records?filter=playlist = "${playlistId}"&expand=playlist&sort=-created`
      );
      items = response.data.items;
    } catch (error) {
      console.log(error);
    }
    break;
}
---

{
  items.map((item) => {
    const itemIsOpen = item.id === itemId;
    const questionsIsOpen = itemIsOpen && questionId;
    return (
      <li class="item" id={`item-${item.id}`}>
        <details open={itemIsOpen} class="group/item detail">
          <summary>
            <span class="hidden group-open/item:block">
              <OpenFolderIcon />
            </span>
            <span class="block group-open/item:hidden">
              <FolderIcon />
            </span>
            {item.title}
          </summary>
          <ul>
            <li>
              <a
                href={`/dashboard/${playlistId}/${item.id}/config`}
                hx-target="#dashboard-content"
                hx-select="#dashboard-content"
              >
                <span class="text-error">
                  <ConfigFileIcon />
                </span>
                config.yaml
              </a>
            </li>
            <li>
              <a
                href={`/dashboard/${playlistId}/${item.id}/article`}
                hx-target="#dashboard-content"
                hx-select="#dashboard-content"
              >
                <span class="text-primary">
                  <MarkdownFileIcon />
                </span>
                article.md
              </a>
            </li>
            <li>
              <details open={questionsIsOpen} class="group/questions detail">
                <summary
                  hx-get={`/dashboard/${playlistId}/${item.id}/files`}
                  hx-target={`#questions-${item.id}`}
                  hx-swap="afterend"
                  hx-trigger={`${questionsIsOpen ? "load" : "click"} once`}
                  hx-select=".question"
                >
                  <span class="hidden group-open/questions:block">
                    <OpenFolderIcon />
                  </span>
                  <span class="block group-open/questions:hidden">
                    <FolderIcon />
                  </span>
                  questions
                  <Spinner />
                </summary>
                <ul>
                  <li class="hidden" id={`questions-${item.id}`} />
                </ul>
              </details>
            </li>
          </ul>
        </details>
      </li>
    );
  })
}
