---
import DashboardLayout from "@layouts/DashboardLayout.astro";
import { SpinnerIcon } from "@lib/icons";
import axios, { AxiosError } from "axios";
import Tooltip from "@components/Tooltip";
import FileNav from "@components/fileNav.astro";

export const prerender = false;
const { playlistId } = Astro.params;
const pb_loc = import.meta.env.PB_LOCATION;
const method = Astro.request.method;
const userData = Astro.locals.user;

let data = { id: "", title: "", description: "" };
let message: AlertMessage = {
  show: false,
  type: "",
  message: "",
};

switch (method) {
  case "POST":
    message.show = true;
    try {
      const formBody = await Astro.request.formData();
      const id = formBody.get("id") as string;
      const title = formBody.get("title") as string;
      const description = formBody.get("description") as string;

      data = { id, title, description };
      await axios.patch(
        `${pb_loc}/api/collections/playlist/records/${id}`,
        {
          title,
          description,
        },
        {
          headers: {
            Authorization: `Bearer ${userData?.token}`,
          },
        }
      );
      message.type = "success";
      message.message = "Updated the config file.";
    } catch (error) {
      message.type = "error";
      if (error instanceof AxiosError) {
        message.message = error.response?.statusText || "Something went wrong.";
      } else {
        message.message = "Something went wrong.";
      }
    }
    break;

  default:
    try {
      const response = await axios.get(
        `${pb_loc}/api/collections/playlist/records/${playlistId}?fields=id,title,description`
      );

      data = response.data;
    } catch (error) {
      message.show = true;
      message.type = "error";
      if (error instanceof AxiosError) {
        message.message = "Can't find this playlist.";
      } else {
        message.message = "Something went wrong.";
      }
    }
    break;
}

const bread_crumbs = [
  {
    type: "." as ".",
    href: "/dashboard",
    title: data.title,
  },
  {
    type: ".yaml" as ".yaml",
    href: "",
    title: "config",
    className: "text-error pr-1",
  },
];
---

<DashboardLayout message={message}>
  <form>
    <FileNav
      bread_crumbs={bread_crumbs}
      save_content={{ url: `/dashboard/${playlistId}/config` }}
      delete_content={{
        target: `#playlist-${playlistId}`,
        url: `/dashboard/files?id=${playlistId}`,
      }}
      create_content={{
        indicator: "#loading",
        select: ".item",
        target: `#items-${playlistId}`,
        title: "+ ITEM",
        url: `/dashboard/${playlistId}/files`,
      }}
    />
    <div
      class="flex text-2xl gap-2 p-2 group focus-within:bg-accent focus-within:bg-opacity-10 duration-300"
    >
      <input type="hidden" name="id" value={data.id} />
      <label for="title">title:</label>
      <input
        id="title"
        value={data.title}
        pattern="^(.{1,64})$"
        name="title"
        spellcheck="false"
        type="text"
        class="w-full invalid:decoration-wavy invalid:underline invalid:decoration-error bg-transparent outline-none italic text-xl opacity-50 tracking-wide"
      />
      <Tooltip tip="length: 1 - 64" />
    </div>
    <div
      class="flex flex-col text-2xl p-2 focus-within:bg-accent focus-within:bg-opacity-10 duration-300"
    >
      <label for="description">description:</label>
      <textarea
        maxlength="1024"
        id="description"
        spellcheck="false"
        name="description"
        rows={10}
        class="w-full bg-transparent outline-none resize-none italic text-xl opacity-50 tracking-wide"
        >{data.description}</textarea
      >
    </div>
    <div
      id="loading"
      class="htmx-indicator alert text-base px-4 py-2 rounded-none w-fit absolute flex justify-between bottom-4 right-4"
    >
      <div class="animate-spin">
        <SpinnerIcon />
      </div>
       Loading
    </div>
  </form>
</DashboardLayout>
