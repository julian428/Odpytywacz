---
import Spinner from "@components/spinner.astro";
import { ConfigFileIcon, FolderIcon, OpenFolderIcon } from "@lib/icons";
import axios from "axios";

const userData = Astro.locals.user;
const pb_loc = import.meta.env.PB_LOCATION;
const urlparams = new URL(Astro.url).searchParams;
const playlistId = urlparams.get("playlistId");
const itemId = urlparams.get("itemId");
const questionId = urlparams.get("questionId");
const method = Astro.request.method;

let playlists: Playlist[] = [];

switch (method) {
  case "DELETE":
    const playlistId = urlparams.get("id");
    try {
      const response = await axios.delete(
        `${pb_loc}/api/collections/playlist/records/${playlistId}`
      );
    } catch (error) {
      console.log(error);
    }
    break;
  case "POST":
    try {
      const response = await axios.post(
        `${pb_loc}/api/collections/playlist/records`,
        {
          title: "New Playlist",
          owner: userData?.record.id,
        }
      );
      playlists = [response.data];
    } catch (error) {
      console.log(error);
    }
    break;
  default:
    try {
      const response = await axios.get(
        `${pb_loc}/api/collections/playlist/records?filter=owner = "${userData?.record.id}"&sort=-created`
      );
      playlists = response.data.items;
    } catch (error) {
      console.log(error);
    }
    break;
}
---

{
  playlists.map((playlist) => {
    const isOpen = playlist.id === playlistId;
    return (
      <li class="item" id={`playlist-${playlist.id}`}>
        <details open={isOpen} class="group/playlist detail">
          <summary
            hx-get={`/dashboard/${playlist.id}/files?itemId=${itemId}&questionId=${questionId}`}
            hx-target={`#items-${playlist.id}`}
            hx-swap="afterend"
            hx-trigger={`${isOpen ? "load" : "click"} once`}
            hx-select=".item"
          >
            <span class="hidden group-open/playlist:block">
              <OpenFolderIcon />
            </span>
            <span class="block group-open/playlist:hidden">
              <FolderIcon />
            </span>
            {playlist.title}
            <Spinner />
          </summary>
          <ul>
            <li id={`items-${playlist.id}`}>
              <a
                href={`/dashboard/${playlist.id}/config`}
                hx-swap="outerHTML"
                hx-target="#dashboard-content"
                hx-select="#dashboard-content"
              >
                <span class="text-error">
                  <ConfigFileIcon />
                </span>
                config.yaml
                <Spinner />
              </a>
            </li>
          </ul>
        </details>
      </li>
    );
  })
}
